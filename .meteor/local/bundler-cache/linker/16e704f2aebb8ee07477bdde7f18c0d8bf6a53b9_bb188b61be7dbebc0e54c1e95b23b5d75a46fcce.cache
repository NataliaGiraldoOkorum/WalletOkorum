[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Hook;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"callback-hook\":{\"hook.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                               //\n// packages/callback-hook/hook.js                                                                //\n//                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                 //\nvar _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nmodule.export({\n  Hook: function () {\n    return Hook;\n  }\n});\n// XXX This pattern is under development. Do not add more callsites\n// using this package for now. See:\n// https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f\n//\n// Encapsulates the pattern of registering callbacks on a hook.\n//\n// The `each` method of the hook calls its iterator function argument\n// with each registered callback.  This allows the hook to\n// conditionally decide not to call the callback (if, for example, the\n// observed object has been closed or terminated).\n//\n// By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be\n// called with the Meteor environment of the calling code that\n// registered the callback. Override by passing { bindEnvironment: false }\n// to the constructor.\n//\n// Registering a callback returns an object with a single `stop`\n// method which unregisters the callback.\n//\n// The code is careful to allow a callback to be safely unregistered\n// while the callbacks are being iterated over.\n//\n// If the hook is configured with the `exceptionHandler` option, the\n// handler will be called if a called callback throws an exception.\n// By default (if the exception handler doesn't itself throw an\n// exception, or if the iterator function doesn't return a falsy value\n// to terminate the calling of callbacks), the remaining callbacks\n// will still be called.\n//\n// Alternatively, the `debugPrintExceptions` option can be specified\n// as string describing the callback.  On an exception the string and\n// the exception will be printed to the console log with\n// `Meteor._debug`, and the exception otherwise ignored.\n//\n// If an exception handler isn't specified, exceptions thrown in the\n// callback will propagate up to the iterator function, and will\n// terminate calling the remaining callbacks if not caught.\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar Hook = /*#__PURE__*/function () {\n  function Hook(options) {\n    options = options || {};\n    this.nextCallbackId = 0;\n    this.callbacks = Object.create(null);\n    // Whether to wrap callbacks with Meteor.bindEnvironment\n    this.bindEnvironment = true;\n    if (options.bindEnvironment === false) {\n      this.bindEnvironment = false;\n    }\n    if (options.exceptionHandler) {\n      this.exceptionHandler = options.exceptionHandler;\n    } else if (options.debugPrintExceptions) {\n      if (typeof options.debugPrintExceptions !== \"string\") {\n        throw new Error(\"Hook option debugPrintExceptions should be a string\");\n      }\n      this.exceptionHandler = options.debugPrintExceptions;\n    }\n  }\n  var _proto = Hook.prototype;\n  _proto.register = function () {\n    function register(callback) {\n      var _this2 = this;\n      var exceptionHandler = this.exceptionHandler || function (exception) {\n        // Note: this relies on the undocumented fact that if bindEnvironment's\n        // onException throws, and you are invoking the callback either in the\n        // browser or from within a Fiber in Node, the exception is propagated.\n        throw exception;\n      };\n      if (this.bindEnvironment) {\n        callback = Meteor.bindEnvironment(callback, exceptionHandler);\n      } else {\n        callback = dontBindEnvironment(callback, exceptionHandler);\n      }\n      var id = this.nextCallbackId++;\n      this.callbacks[id] = callback;\n      return {\n        callback: callback,\n        stop: function () {\n          delete _this2.callbacks[id];\n        }\n      };\n    }\n    return register;\n  }();\n  _proto.clear = function () {\n    function clear() {\n      this.nextCallbackId = 0;\n      this.callbacks = [];\n    }\n    return clear;\n  }()\n  /**\n   * For each registered callback, call the passed iterator function with the callback.\n   *\n   * The iterator function can choose whether or not to call the\n   * callback.  (For example, it might not call the callback if the\n   * observed object has been closed or terminated).\n   * The iteration is stopped if the iterator function returns a falsy\n   * value or throws an exception.\n   *\n   * @param iterator\n   */\n  ;\n  _proto.forEach = function () {\n    function forEach(iterator) {\n      // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't\n      // run them to completion (and exceptions thrown from onException are not\n      // propagated), so we need to be in a Fiber.\n      Meteor._nodeCodeMustBeInFiber();\n      var ids = Object.keys(this.callbacks);\n      for (var i = 0; i < ids.length; ++i) {\n        var id = ids[i];\n        // check to see if the callback was removed during iteration\n        if (hasOwn.call(this.callbacks, id)) {\n          var callback = this.callbacks[id];\n          if (!iterator(callback)) {\n            break;\n          }\n        }\n      }\n    }\n    return forEach;\n  }()\n  /**\n   * For each registered callback, call the passed iterator function with the callback.\n   *\n   * it is a counterpart of forEach, but it is async and returns a promise\n   * @param iterator\n   * @return {Promise<void>}\n   * @see forEach\n   */\n  ;\n  _proto.forEachAsync = function () {\n    function forEachAsync(iterator) {\n      var ids, i, id, callback;\n      return _regeneratorRuntime.async(function () {\n        function forEachAsync$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              ids = Object.keys(this.callbacks);\n              i = 0;\n            case 2:\n              if (!(i < ids.length)) {\n                _context.next = 13;\n                break;\n              }\n              id = ids[i]; // check to see if the callback was removed during iteration\n              if (!hasOwn.call(this.callbacks, id)) {\n                _context.next = 10;\n                break;\n              }\n              callback = this.callbacks[id];\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(iterator(callback));\n            case 8:\n              if (_context.sent) {\n                _context.next = 10;\n                break;\n              }\n              return _context.abrupt(\"break\", 13);\n            case 10:\n              ++i;\n              _context.next = 2;\n              break;\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n        return forEachAsync$;\n      }(), null, this, null, Promise);\n    }\n    return forEachAsync;\n  }()\n  /**\n   * @deprecated use forEach\n   * @param iterator\n   */\n  ;\n  _proto.each = function () {\n    function each(iterator) {\n      return this.forEach(iterator);\n    }\n    return each;\n  }();\n  return Hook;\n}();\n// Copied from Meteor.bindEnvironment and removed all the env stuff.\nfunction dontBindEnvironment(func, onException, _this) {\n  if (!onException || typeof onException === 'string') {\n    var description = onException || \"callback of async function\";\n    onException = function (error) {\n      Meteor._debug(\"Exception in \" + description, error);\n    };\n  }\n  return function () {\n    var ret;\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      ret = func.apply(_this, args);\n    } catch (e) {\n      onException(e);\n    }\n    return ret;\n  };\n}\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/callback-hook/hook.js\");\n\n/* Exports */\nPackage._define(\"callback-hook\", exports, {\n  Hook: Hook\n});\n\n})();\n","servePath":"/packages/callback-hook.js","sourceMap":{"version":3,"sources":["packages/callback-hook/hook.js"],"names":["_regeneratorRuntime","module","link","default","v","export","Hook","hasOwn","Object","prototype","hasOwnProperty","options","nextCallbackId","callbacks","create","bindEnvironment","exceptionHandler","debugPrintExceptions","Error","register","callback","exception","Meteor","dontBindEnvironment","id","stop","clear","forEach","iterator","_nodeCodeMustBeInFiber","ids","keys","i","length","call","forEachAsync","each","func","onException","_this","description","error","_debug","ret","args","apply","e"],"mappings":"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","file":"/packages/callback-hook.js","sourcesContent":["// XXX This pattern is under development. Do not add more callsites\n// using this package for now. See:\n// https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f\n//\n// Encapsulates the pattern of registering callbacks on a hook.\n//\n// The `each` method of the hook calls its iterator function argument\n// with each registered callback.  This allows the hook to\n// conditionally decide not to call the callback (if, for example, the\n// observed object has been closed or terminated).\n//\n// By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be\n// called with the Meteor environment of the calling code that\n// registered the callback. Override by passing { bindEnvironment: false }\n// to the constructor.\n//\n// Registering a callback returns an object with a single `stop`\n// method which unregisters the callback.\n//\n// The code is careful to allow a callback to be safely unregistered\n// while the callbacks are being iterated over.\n//\n// If the hook is configured with the `exceptionHandler` option, the\n// handler will be called if a called callback throws an exception.\n// By default (if the exception handler doesn't itself throw an\n// exception, or if the iterator function doesn't return a falsy value\n// to terminate the calling of callbacks), the remaining callbacks\n// will still be called.\n//\n// Alternatively, the `debugPrintExceptions` option can be specified\n// as string describing the callback.  On an exception the string and\n// the exception will be printed to the console log with\n// `Meteor._debug`, and the exception otherwise ignored.\n//\n// If an exception handler isn't specified, exceptions thrown in the\n// callback will propagate up to the iterator function, and will\n// terminate calling the remaining callbacks if not caught.\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport class Hook {\n  constructor(options) {\n    options = options || {};\n    this.nextCallbackId = 0;\n    this.callbacks = Object.create(null);\n    // Whether to wrap callbacks with Meteor.bindEnvironment\n    this.bindEnvironment = true;\n    if (options.bindEnvironment === false) {\n      this.bindEnvironment = false;\n    }\n\n    if (options.exceptionHandler) {\n      this.exceptionHandler = options.exceptionHandler;\n    } else if (options.debugPrintExceptions) {\n      if (typeof options.debugPrintExceptions !== \"string\") {\n        throw new Error(\"Hook option debugPrintExceptions should be a string\");\n      }\n      this.exceptionHandler = options.debugPrintExceptions;\n    }\n  }\n\n  register(callback) {\n    const exceptionHandler = this.exceptionHandler || function (exception) {\n      // Note: this relies on the undocumented fact that if bindEnvironment's\n      // onException throws, and you are invoking the callback either in the\n      // browser or from within a Fiber in Node, the exception is propagated.\n      throw exception;\n    };\n\n    if (this.bindEnvironment) {\n      callback = Meteor.bindEnvironment(callback, exceptionHandler);\n    } else {\n      callback = dontBindEnvironment(callback, exceptionHandler);\n    }\n\n    const id = this.nextCallbackId++;\n    this.callbacks[id] = callback;\n\n    return {\n      callback,\n      stop: () => {\n        delete this.callbacks[id];\n      }\n    };\n  }\n\n  clear() {\n    this.nextCallbackId = 0;\n    this.callbacks = [];\n  }\n\n  /**\n   * For each registered callback, call the passed iterator function with the callback.\n   *\n   * The iterator function can choose whether or not to call the\n   * callback.  (For example, it might not call the callback if the\n   * observed object has been closed or terminated).\n   * The iteration is stopped if the iterator function returns a falsy\n   * value or throws an exception.\n   *\n   * @param iterator\n   */\n  forEach(iterator) {\n    // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't\n    // run them to completion (and exceptions thrown from onException are not\n    // propagated), so we need to be in a Fiber.\n    Meteor._nodeCodeMustBeInFiber();\n\n    const ids = Object.keys(this.callbacks);\n    for (let i = 0;  i < ids.length;  ++i) {\n      const id = ids[i];\n      // check to see if the callback was removed during iteration\n      if (hasOwn.call(this.callbacks, id)) {\n        const callback = this.callbacks[id];\n        if (! iterator(callback)) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * For each registered callback, call the passed iterator function with the callback.\n   *\n   * it is a counterpart of forEach, but it is async and returns a promise\n   * @param iterator\n   * @return {Promise<void>}\n   * @see forEach\n   */\n  async forEachAsync(iterator) {\n    const ids = Object.keys(this.callbacks);\n    for (let i = 0;  i < ids.length;  ++i) {\n      const id = ids[i];\n      // check to see if the callback was removed during iteration\n      if (hasOwn.call(this.callbacks, id)) {\n        const callback = this.callbacks[id];\n        if (!await iterator(callback)) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @deprecated use forEach\n   * @param iterator\n   */\n  each(iterator) {\n    return this.forEach(iterator);\n  }\n}\n\n// Copied from Meteor.bindEnvironment and removed all the env stuff.\nfunction dontBindEnvironment(func, onException, _this) {\n  if (!onException || typeof(onException) === 'string') {\n    const description = onException || \"callback of async function\";\n    onException = function (error) {\n      Meteor._debug(\n        \"Exception in \" + description,\n        error\n      );\n    };\n  }\n\n  return function (...args) {\n    let ret;\n    try {\n      ret = func.apply(_this, args);\n    } catch (e) {\n      onException(e);\n    }\n    return ret;\n  };\n}\n"]}}]