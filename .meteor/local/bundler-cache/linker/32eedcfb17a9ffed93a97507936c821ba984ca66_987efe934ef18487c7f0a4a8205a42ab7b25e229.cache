[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nECMAScript = Package.ecmascript.ECMAScript;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"ContactsCollection.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// imports/api/ContactsCollection.js                                         //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n}, 0);\nmodule.exportDefault(ContactsCollection = new Mongo.Collection('contacts'));\n///////////////////////////////////////////////////////////////////////////////\n\n},\"ContactsMethods.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// imports/api/ContactsMethods.js                                            //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nlet ContactsCollection;\nmodule.link(\"./ContactsCollection\", {\n  default(v) {\n    ContactsCollection = v;\n  }\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 1);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n}, 2);\nlet ImportContactsRounded;\nmodule.link(\"@mui/icons-material\", {\n  ImportContactsRounded(v) {\n    ImportContactsRounded = v;\n  }\n}, 3);\nMeteor.methods({\n  'contacts.insert'(_ref) {\n    let {\n      name,\n      email,\n      imageURL\n    } = _ref;\n    check(name, String);\n    check(email, String);\n    check(imageURL, String);\n    if (!name) {\n      throw new Meteor.Error(\"Name is required\");\n    }\n    return ContactsCollection.insert({\n      name,\n      email,\n      imageURL,\n      createdAt: new Date()\n    });\n  },\n  'contacts.remove'(_ref2) {\n    let {\n      contactId\n    } = _ref2;\n    check(contactId, String);\n    ContactsCollection.remove(contactId);\n  },\n  'contacts.archive'(_ref3) {\n    let {\n      contactId\n    } = _ref3;\n    check(contactId, String);\n    ContactsCollection.update({\n      _id: contactId\n    }, {\n      $set: {\n        archived: true\n      }\n    });\n  }\n});\n///////////////////////////////////////////////////////////////////////////////\n\n},\"ContactsPublications.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// imports/api/ContactsPublications.js                                       //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nlet ContactsCollection;\nmodule.link(\"./ContactsCollection\", {\n  default(v) {\n    ContactsCollection = v;\n  }\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 1);\nMeteor.publish('allContacts', function publishAllContacts() {\n  return ContactsCollection.find();\n});\nMeteor.publish('contacts', function publishAllContacts() {\n  return ContactsCollection.find({\n    archived: {\n      $ne: true\n    }\n  });\n});\n///////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// server/main.js                                                            //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nmodule.link(\"../imports/api/ContactsCollection\");\nmodule.link(\"../imports/api/ContactsMethods\");\nmodule.link(\"../imports/api/ContactsPublications\");\nMeteor.startup(() => {});\n///////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".ts\",\n    \".jsx\",\n    \".mjs\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"f4476dfdb00c997c6c06fc34b34588532210b3eb","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/ContactsCollection.js","imports/api/ContactsMethods.js","imports/api/ContactsPublications.js","server/main.js"],"names":["Mongo","module","link","v","exportDefault","ContactsCollection","Collection","default","Meteor","check","ImportContactsRounded","methods","name","email","imageURL","String","Error","insert","createdAt","Date","contactId","remove","update","_id","$set","archived","publish","publishAllContacts","find","$ne","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo';\n\nexport default ContactsCollection = new Mongo.Collection('contacts');","import ContactsCollection from \"./ContactsCollection\";\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { ImportContactsRounded } from \"@mui/icons-material\";\n\nMeteor.methods({\n   'contacts.insert'({ name, email, imageURL }) {\n        check(name, String);\n        check(email, String);\n        check(imageURL, String);\n        if (!name) {\n            throw new Meteor.Error(\"Name is required\");\n        }\n        return ContactsCollection.insert({ name, email, imageURL, createdAt: new Date() });\n    },\n    'contacts.remove'({contactId}){\n        check(contactId, String);\n        ContactsCollection.remove(contactId);        \n    },\n    'contacts.archive'({ contactId }){\n        check(contactId, String );\n        ContactsCollection.update({ _id: contactId}, {$set: { archived: true}});\n    }\n})\n\n","import ContactsCollection from \"./ContactsCollection\"\nimport { Meteor } from \"meteor/meteor\";\n\nMeteor.publish('allContacts', function publishAllContacts() {\n    return ContactsCollection.find();\n}) \n\nMeteor.publish('contacts', function publishAllContacts() {\n    return ContactsCollection.find({ archived: { $ne: true }});\n}) ","import { Meteor } from 'meteor/meteor';\nimport \"../imports/api/ContactsCollection\";\nimport \"../imports/api/ContactsMethods\";\nimport \"../imports/api/ContactsPublications\"\n\nMeteor.startup(() => {\n\n});\n"]}}]